import dotenv from "dotenv";
import axios from "axios";
import { ethers } from "ethers";
import Transaction from "../models/transactionModel.js"; // –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ MongoDB

dotenv.config();

const provider = new ethers.JsonRpcProvider(process.env.ETH_RPC_URL || "https://mainnet.infura.io/v3/YOUR_INFURA_API_KEY");

// üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
export async function getWalletBalance(walletAddress) {
    try {
        if (!ethers.isAddress(walletAddress)) {
            throw new Error("Invalid wallet address");
        }

        const balance = await provider.getBalance(walletAddress);
        return ethers.formatEther(balance); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ETH
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å");
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export async function getTransactions(walletAddress) {
    try {
        const apiKey = process.env.ETHERSCAN_API_KEY;
        const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${walletAddress}&startblock=0&endblock=99999999&sort=desc&apikey=${apiKey}`;

        console.log("Fetching transactions from:", url);
        const response = await axios.get(url);
        
        if (response.data.status !== "1") {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
        }

        const transactions = response.data.result; // –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        // üîπ –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ MongoDB
        for (let tx of transactions) {
            await Transaction.updateOne(
                { hash: tx.hash }, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ö–µ—à—É, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                { $set: tx }, 
                { upsert: true } // –í—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ
            );
        }

        console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ.`);
        return transactions;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", error);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    }
}
